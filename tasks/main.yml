---
- name: Retrieve topic-id from component
  dci_component:
    id: '{{ dci_retrieve_component_component_id }}'
  register: _component

- name: Retrieve topic information from topic
  dci_topic:
    id: '{{ _component.component.topic_id }}'
    embed: product
  register: _topic

- name: Check if component is already present
  stat:
    path: /etc/yum.repos.d/{{ _topic.topic.product.name }}.repo
  register: stat_result

- name: Get version of component
  shell: cat /etc/yum.repos.d/{{ _topic.topic.product.name }}.repo | grep name | awk '{print $3}'
  when: stat_result.stat.exists == True
  register: version

- name: Sync component
  block:
    - name: Configure local yum repository file
      yum_repository:
        name: '{{ _topic.topic.product.name }}'
        description: '{{ _component.component.name }}'
        baseurl: '{{ dci_retrieve_component_repo_url | default("https://repo.distributed-ci.io") }}/{{ _topic.topic.product_id }}/{{ _topic.topic.id }}/{{ _component.component.id }}/'
        sslclientcert: '{{ dci_retrieve_component_sslclientcert | default("/etc/ssl/repo/dci.crt") }}'
        sslclientkey: '{{ dci_retrieve_component_sslclientkey | default("/etc/ssl/repo/dci.key") }}'
        enabled: no
      become: True

    - name: Cleanup local cache
      command: yum clean all
      args:
        warn: no

    - name: Syncing remote repository to local directory
      shell: reposync --repoid={{ _topic.topic.product.name }} -l -m --download-meta -n -d -p "{{ dci_retrieve_component_local_repo }}/"
      become: True

    - name: Running createrepo locally
      shell: createrepo --update -g comps.xml "{{ dci_retrieve_component_local_repo }}/{{ _topic.topic.product.name }}"
      args:
        chdir: "{{ dci_retrieve_component_local_repo }}/"
      become: True
  when: _component.component.name != version.stdout
